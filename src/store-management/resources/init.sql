CREATE DATABASE IF NOT EXISTS TYRE_STORE_MS_DEV;
USE TYRE_STORE_MS_DEV;

CREATE TABLE PRODUCT
(
    ID             VARCHAR(50) NOT NULL,
    NAME           VARCHAR(100),
    TYPE           VARCHAR(100),
    SIZE           VARCHAR(10),
    BRAND          VARCHAR(100),
    PATTERN        VARCHAR(50),
    IMAGE_PATH     VARCHAR(100),
    REF_PRICE      DECIMAL(13, 4),
    TOTAL_QUANTITY INT         NOT NULL,
    DESCRIPTION    VARCHAR(512),
    CREATED_DATE   DATETIME,
    CREATED_BY     VARCHAR(50),
    MODIFIED_DATE  DATETIME,
    MODIFIED_BY    VARCHAR(50),
    CONSTRAINT PK_PRODUCT PRIMARY KEY (ID)
);


CREATE TABLE ACCOUNT
(
    ID       VARCHAR(50),
    USERNAME VARCHAR(50),
    PASSWORD VARCHAR(50),
    SALT     CHAR(32),
    CONSTRAINT PK_ACCOUNT PRIMARY KEY (ID)
);


CREATE TABLE OPERATION_HISTORY
(
    ID          VARCHAR(50),
    ACCOUNT_ID  VARCHAR(50),
    ACTION      VARCHAR(50),
    MESSAGE     VARCHAR(256),
    ACTION_DATE DATETIME,
    CONSTRAINT PK_OPS_HISTORY PRIMARY KEY (ID),
    CONSTRAINT FK_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID)
);


CREATE TABLE CUSTOMER
(
    ID                  VARCHAR(50),
    FULL_NAME           VARCHAR(50),
    ADDRESS             VARCHAR(512),
    BANK_ACCOUNT_NUMBER VARCHAR(20),
    TAX_CODE            VARCHAR(20),
    CONSTRAINT PK_CUSTOMER PRIMARY KEY (ID)
);


CREATE TABLE INVOICE
(
    ID          VARCHAR(50),
    INVOICE_NO  INT,
    EXPORT_DATE DATETIME,
    DETAIL      VARCHAR(512),
    TOTAL       DECIMAL(13, 4),
    ACCOUNT_ID  VARCHAR(50),
    CUSTOMER_ID VARCHAR(50),
    CONSTRAINT PK_INVOICE PRIMARY KEY (ID),
    CONSTRAINT FK_INVOICE_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID),
    CONSTRAINT FK_INVOICE_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (ID)
);




CREATE TABLE INVOICE_LINE
(
    ID           VARCHAR(50),
    EXPORT_PRICE DECIMAL(13, 4),
    QUANTITY     INT,
    TOTAL        DECIMAL(13, 4),
    INVOICE_ID   VARCHAR(50),
    CONSTRAINT PK_INVOICE_LINE PRIMARY KEY (ID),
    CONSTRAINT FK_INVOICE_LINE_INVOICE FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE (ID)
);

CREATE TABLE TRANSACTION
(
    ID         VARCHAR(50),
    DATE       DATETIME,
    ACCOUNT_ID VARCHAR(50),
    TYPE       VARCHAR(1),
    BILLING    BOOL,
    CONSTRAINT PK_TRANSACTION PRIMARY KEY (ID),
    CONSTRAINT FK_TRANSACTION_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID)
);


CREATE TABLE PRODUCT_IMPORT
(
    ID                   VARCHAR(50)    NOT NULL,
    PRODUCT_ID           VARCHAR(50)    NOT NULL,
    TRANSACTION_ID       VARCHAR(50),
    DATE                 DATETIME,
    IMPORT_PRICE         DECIMAL(13, 4) NOT NULL,
    CURRENT_IMPORT_PRICE DECIMAL(13, 4),
    IMPORT_QUANTITY      INT,
    REMAIN_QUANTITY      INT,
    CONSTRAINT PK_PRODUCT_IMPORT PRIMARY KEY (ID),
    CONSTRAINT FK_PRODUCT_IMPORT_TRANSACTION FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTION (ID),
    CONSTRAINT FK_PRODUCT_IMPORT_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID)
);


CREATE TABLE PRODUCT_SALE
(
    ID             VARCHAR(50),
    PRODUCT_ID     VARCHAR(50),
    WARRANTY_CODE  VARCHAR(50),
    TYPE           VARCHAR(50),
    SALE_PRICE     DECIMAL(13, 4),
    QUANTITY       INT,
    TRANSACTION_ID VARCHAR(50),
    CONSTRAINT PK_PRODUCT_SALE PRIMARY KEY (ID),
    CONSTRAINT FK_PRODUCT_SALE_TRANSACTION FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTION (ID),
    CONSTRAINT FK_PRODUCT_SALE_PRODUCT_IMPORT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID)
);


CREATE TABLE SALE_IMPORT_REPORT
(
    PRODUCT_SALE_ID VARCHAR(50),
    PRODUCT_IMPORT_ID VARCHAR(50),
    QUANTITY INT,
    CONSTRAINT PK_SIR PRIMARY KEY (PRODUCT_IMPORT_ID, PRODUCT_SALE_ID),
    CONSTRAINT FK_SIR_PRODUCT_SALE FOREIGN KEY (PRODUCT_SALE_ID) REFERENCES PRODUCT_SALE(ID),
    CONSTRAINT FK_SIR_PRODUCT_IMPORT FOREIGN KEY (PRODUCT_IMPORT_ID) REFERENCES PRODUCT_IMPORT(ID)
);


-- CREATE TRIGGER STATEMENT
DROP TRIGGER IF EXISTS TRIG_PRODUCT_IMPORT;
CREATE TRIGGER TRIG_PRODUCT_IMPORT
    BEFORE INSERT ON PRODUCT_IMPORT
    FOR EACH ROW
        UPDATE PRODUCT SET PRODUCT.TOTAL_QUANTITY = TOTAL_QUANTITY + NEW.IMPORT_QUANTITY
            WHERE PRODUCT.ID = NEW.PRODUCT_ID;

DROP TRIGGER IF EXISTS TRIG_PRODUCT_SALE;
CREATE TRIGGER TRIG_PRODUCT_SALE
    BEFORE INSERT ON PRODUCT_SALE
    FOR EACH ROW
        UPDATE PRODUCT SET TOTAL_QUANTITY = TOTAL_QUANTITY - NEW.QUANTITY
            WHERE PRODUCT.ID = NEW.PRODUCT_ID






























